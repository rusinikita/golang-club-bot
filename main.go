package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/caarlos0/env/v6"
	"github.com/joho/godotenv"
	bot "gopkg.in/telebot.v3"

	"github.com/rusinikita/gogoClub/airtable"
	"github.com/rusinikita/gogoClub/request"
	"github.com/rusinikita/gogoClub/simplectx"
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("Error loading .env file")
	}

	db := airtable.New()

	b, cfg := newBot()

	btns := &bot.ReplyMarkup{}
	goButton := btns.Data("Go üí™", "go")
	btns.Inline(btns.Row(goButton))

	b.Handle("/start", func(c bot.Context) error {
		return simplectx.Wrap(c, func(c bot.Context, sc *simplectx.Context) {
			ctx := context.Background()

			sc.Send(hello)
			sc.Send(fmt.Sprintf(hiText, cfg.AnnounceLink), &bot.SendOptions{
				DisableWebPagePreview: true,
				ReplyMarkup:           btns,
			})

			var users []request.Request
			err := db.List(ctx, &users, airtable.Filter(request.NewID(c.Sender())))
			if err != nil {
				log.Println(err)
			}

			if len(users) > 0 {
				return
			}

			sc.Error(db.Create(ctx, request.New(c.Sender())))
		})
	})

	b.Handle(&goButton, func(c bot.Context) error {
		return simplectx.Wrap(c, func(c bot.Context, sc *simplectx.Context) {
			interval := 2 * time.Second
			sc.Send(step1, bot.NoPreview)

			time.Sleep(interval)
			sc.Send(step2, bot.NoPreview, bot.Silent)

			time.Sleep(interval)
			sc.Send(step3, bot.NoPreview, bot.Silent)

			time.Sleep(interval)
			sc.Send(step4, bot.NoPreview, bot.Silent)

			time.Sleep(interval)
			sc.Send(step5, bot.NoPreview, bot.Silent)

			time.Sleep(interval)
			sc.Send(fmt.Sprintf(step6, cfg.QnALink), bot.NoPreview, bot.Silent)
		})
	})

	b.Handle(bot.OnText, func(c bot.Context) error {
		return simplectx.Wrap(c, func(c bot.Context, sc *simplectx.Context) {
			link := ""
			for _, entity := range c.Message().Entities {
				if entity.Type != bot.EntityURL && entity.Type != bot.EntityTextLink {
					continue
				}

				link = entity.URL
				if link == "" {
					link = c.Message().EntityText(entity)
				}

				break
			}

			if link == "" {
				sc.Send(wtf)
				sc.Send(fmt.Sprintf(noLinkText, cfg.QnALink), bot.NoPreview)

				return
			}

			var (
				ctx   = context.Background()
				users []request.Request
				user  = request.New(c.Sender())
			)

			sc.Error(db.List(ctx, &users, airtable.Filter(request.NewID(c.Sender()))))

			if len(users) != 1 {
				user := request.New(c.Sender())
				user.RepositoryLink = link
				sc.Error(db.Create(context.Background(), user))
			} else {
				user = users[0]
				user.RepositoryLink = link
				sc.Error(db.Patch(context.Background(), user))
			}

			sc.Send(wellDone)
			sc.Send(doneText)
		})
	})

	b.Start()
}

func newBot() (*bot.Bot, botConfig) {
	cfg := botConfig{}
	if err := env.Parse(&cfg); err != nil {
		log.Fatalf("%+v", err)
	}

	prefs := bot.Settings{
		Token: cfg.Token,
		OnError: func(err error, c bot.Context) {
			log.Println(err)

			c.Send(fmt.Sprintf(
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–µ <a href=\"%s\">–≤ —ç—Ç–æ–º —á–∞—Ç–µ</a>\n\n%s",
				cfg.QnALink,
				err.Error(),
			), bot.NoPreview)
		},
		ParseMode: bot.ModeHTML,
	}

	b, err := bot.NewBot(prefs)
	if err != nil {
		log.Fatalf("%+v", err)
	}

	return b, cfg
}

type botConfig struct {
	Token        string `env:"BOT_TOKEN,notEmpty"`
	AnnounceLink string `env:"ANNOUNCE_LINK,notEmpty"`
	QnALink      string `env:"QNA_LINK,notEmpty"`
}

type sticker string

func (s sticker) Send(b *bot.Bot, r bot.Recipient, o *bot.SendOptions) (*bot.Message, error) {
	return b.Send(r, &bot.Sticker{File: bot.File{FileID: string(s)}}, o)
}

const (
	hello    sticker = "CAACAgQAAxkBAAOpYmmXKS3ykycZk2qrR97R2_jTLKwAAswAA845CA3fZ3xlfkS5ZCQE"   // üôÉ
	wtf      sticker = "CAACAgQAAxkBAAOrYmmXgeYtrZiN2IuUckR854EheykAApkAA845CA0jIAABUzXpH78kBA" // ü§®
	wellDone sticker = "CAACAgQAAxkBAAOtYmmX5-cveqGjl44BirOjkuy1cz4AApcAA845CA1AIS58gGBWGiQE"   // üëç
)

const (
	hiText = `–ü—Ä–∏–≤–µ—Ç!

–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å <a href="%s">–≤ –∫–ª—É–±–µ –∏–∑—É—á–µ–Ω–∏—è Go</a>, —Ç–æ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É.

–ü—Ä–æ–π–¥–∏ –ø—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é, –∏ —Å–º–æ–∂–µ—à—å —É—á–∏—Ç—å—Å—è GoLang —Å —Ç–µ–º–∏, –∫—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ.`
	step1 = `1. –°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ github.com

–ó–∞–ø–æ–ª–Ω–∏ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è, —Ñ–æ—Ç–æ –∏ –≥–æ—Ä–æ–¥. –ù–∞–ø–∏—à–∏ –≤ bio —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ —É—á–µ–±—ã/—Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∫—É—Ä—Å —Ç–æ–∂–µ)`
	step2 = `2. <a href="https://drive.google.com/file/d/1-8AQtU5WuftQrUioXYkp0bY2K20t9vM3/view?usp=sharing">–°–æ–∑–¥–∞–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π</a>

–ù–∞–∑–≤–∞–Ω–∏–µ kgl-go-learing (—Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–æ)
README —Ñ–∞–π–ª (–Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É)

–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, —Ç–µ—Ç—Ä–∞–¥–∫–æ–π —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –ø–æ–º–æ–∂–µ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è`
	step3 = `3. –ù–∞–ø–∏—à–∏ –≤ README —Ñ–∞–π–ª–µ

1. –û —Å–µ–±–µ
2. –¶–µ–ª—å –∏–∑—É—á–µ–Ω–∏—è. –ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—É—á–∏—Ç—å—Å—è go –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é ("–ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç" - –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç, –Ω–æ –Ω—É–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞—Ç—å)
3. –ü–æ—á–µ–º—É –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–µ –±—Ä–æ—Å–∏—Ç–µ –∑–∞–Ω—è—Ç–∏—è –∏ –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –º–µ–Ω—Ç–æ—Ä–æ–≤ –≤–ø—É—Å—Ç—É—é
4. –û–∂–∏–¥–∞–Ω–∏—è. –ö–∞–∫ —Å–∫–æ—Ä–æ –∏ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —É—á–∞—Å—Ç–∏—è.
5. –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –æ–±—Å—É–¥–∏—Ç—å.

–ò—Å–ø–æ–ª—å–∑—É–π # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤`
	step4 = `4. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.

–ù–∞–ø—Ä–∏–º–µ—Ä, https://github.com/rusinikita/mindful-bot`
	step5      = `5. –î–æ–∂–¥–∏—Å—å –∫–æ–Ω—Ü–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–≤–µ—Ç–∞`
	step6      = `–≠—Ç–æ –≤—Å—ë, –∂–¥—É —Å—Å—ã–ª–∫—É. –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ-—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è - –Ω–∞–ø–∏—à–∏ <a href="%s">–≤ —ç—Ç–æ–º —á–∞—Ç–µ</a>`
	noLinkText = `–¢—ã –Ω–µ –ø—Ä–∏—Å–ª–∞–ª —Å—Å—ã–ª–∫—É. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ - –Ω–∞–ø–∏—à–∏ <a href="%s">–≤ —ç—Ç–æ–º —á–∞—Ç–µ</a>`
	doneText   = `–°—É–ø–µ—Ä. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è—Ç –∑–∞–¥–∞–Ω–∏–µ, —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —Å—Å—ã–ª–∫—É, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.`
)
